#include <iostream>
#include <cstring>

using namespace std;

// Node structure to represent a student
struct Student {
    char rollNumber[20];
    char name[50];
    bool likesVanilla;
    bool likesButterscotch;
    Student* next;
};

// Linked List class
class StudentLinkedList {
private:
    Student* head;

public:
    // Constructor
    StudentLinkedList() {
        head = nullptr;
    }

    // Function to add a new student
    void addStudent(const char rollNumber[], const char name[], bool likesVanilla, bool likesButterscotch) {
        Student* newStudent = new Student;
        strcpy(newStudent->rollNumber, rollNumber);
        strcpy(newStudent->name, name);
        newStudent->likesVanilla = likesVanilla;
        newStudent->likesButterscotch = likesButterscotch;
        newStudent->next = nullptr;

        if (head == nullptr) {
            // List is empty, add as the first student
            head = newStudent;
        } else {
            // Traverse to the end and add the new student
            Student* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newStudent;
        }
    }

    // Function to display students
    void displayStudents() {
        Student* temp = head;
        while (temp != nullptr) {
            cout << "Roll Number: " << temp->rollNumber
                 << ", Name: " << temp->name
                 << ", Likes Vanilla: " << (temp->likesVanilla ? "Yes" : "No")
                 << ", Likes Butterscotch: " << (temp->likesButterscotch ? "Yes" : "No")
                 << endl;
            temp = temp->next;
        }
    }

    // Function to compute and display set of students who like either vanilla or butterscotch or both
    void displayEitherVanillaOrButterscotch() {
        cout << "Students who like either vanilla or butterscotch or both:" << endl;
        Student* temp = head;
        while (temp != nullptr) {
            if (temp->likesVanilla || temp->likesButterscotch) {
                cout << temp->name << endl;
            }
            temp = temp->next;
        }
    }

    // Function to compute and display set of students who like both vanilla and butterscotch
    void displayBothVanillaAndButterscotch() {
        cout << "Students who like both vanilla and butterscotch:" << endl;
        Student* temp = head;
        while (temp != nullptr) {
            if (temp->likesVanilla && temp->likesButterscotch) {
                cout << temp->name << endl;
            }
            temp = temp->next;
        }
    }

    // Function to compute and display number of students who like neither vanilla nor butterscotch
    void displayNeitherVanillaNorButterscotch() {
        int count = 0;
        Student* temp = head;
        while (temp != nullptr) {
            if (!temp->likesVanilla && !temp->likesButterscotch) {
                count++;
            }
            temp = temp->next;
        }

        cout << "Number of students who like neither vanilla nor butterscotch: " << count << endl;
    }
};

int main() {
    // Create a linked list for students
    StudentLinkedList studentsList;

    // Add students to the list
    studentsList.addStudent("R001", "John", true, false);
    studentsList.addStudent("R002", "Alice", false, true);
    studentsList.addStudent("R003", "Bob", true, true);
    studentsList.addStudent("R004", "Eva", false, false);

    // Display all students
    cout << "All Students:" << endl;
    studentsList.displayStudents();

    // Display students who like either vanilla or butterscotch or both
    studentsList.displayEitherVanillaOrButterscotch();

    // Display students who like both vanilla and butterscotch
    studentsList.displayBothVanillaAndButterscotch();

    // Display number of students who like neither vanilla nor butterscotch
    studentsList.displayNeitherVanillaNorButterscotch();

    return 0;
}
 
